#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('backend:server');
var http = require('http');
var Symbols = require('../EventHandlers/Symbols');
var {
  sequelize
} = require('../models');
var server = require('http').createServer();
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);


var io = require('socket.io')(server);
var appsockets = {
  allSockets: []
};

io.on('connection', function (socket) {
  console.log("client connect");
  socket.emit('message', 'Vous êtes bien connecté !');
  socket.emit('request',
    function () {
      console.log("request");
    } /* */ ); // emit an event to the socket
  io.emit('broadcast', /* */ ); // emit an event to all connected sockets

  var eventHandlers = {
    symbol: new Symbols(appsockets, socket),
  };
  // Bind events to handlers
  for (var category in eventHandlers) {
    var handler = eventHandlers[category].handler;
    let asocket = eventHandlers[category].socket;
    for (var event in handler) {
      asocket.on(event, handler[event]);
    }
  }

  appsockets.allSockets.push(socket);

  socket.on('disconnect', () => {
    console.log("client disconnect");
  });



});

/**
 * Listen on provided port, on all network interfaces.
 */
const isDev = process.env.NODE_ENV !== 'production';
sequelize.sync({
  force: isDev
}).then(() => {
  console.log("sync db ok");
  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);
});


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string' ?
    'Pipe ' + port :
    'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string' ?
    'pipe ' + addr :
    'port ' + addr.port;
  console.log('Listening on ' + bind);
}